#!/usr/bin/env bash

# shellcheck disable=SC2155

set -Eeuo pipefail
trap 'print_error ${BASH_SOURCE[0]} ${LINENO} ${?}' ERR
trap 'rm -rf ${TEMP_DIR}' EXIT

# Arguments
readonly SCRIPT_DIR="$(cd "$(dirname "${0}")" && pwd)"
readonly SCRIPT=$(basename "${0}")

# Settings
readonly BIN_DIR="${HOME}/dev/bin"
readonly TEMP_DIR="/tmp/${SCRIPT}"
readonly OS="linux"
readonly ARCH_1="amd64"
readonly ARCH_2="x86_64"
readonly ARCH_3="musl"

echo_info()
{
    echo -e "\e[0;36m${*}\e[0m"
}

echo_error()
{
    echo -e "\e[0;31m${*}\e[0m"
}

print_error()
{
    local -r SOURCE_PATH="${1}"
    local -r LINE_NUMBER="${2}"
    local -r EXIT_STATUS="${3}"
    local -r CONTEXT_LINES="3"
    local -r SOURCE_CODE="$(pr -tn "${SOURCE_PATH}")"

    local RELATIVE_PATH="${SOURCE_PATH#"${SCRIPT_DIR}"}"
    local -r RELATIVE_PATH="${RELATIVE_PATH#/}"

    echo
    echo_error "\e[1mError: command exited with status ${EXIT_STATUS} at ${RELATIVE_PATH}:${LINE_NUMBER}"

    tail -n +$((LINE_NUMBER - CONTEXT_LINES)) <<< "${SOURCE_CODE}" | head -n ${CONTEXT_LINES}
    echo_error "\e[1m$(tail -n +$((LINE_NUMBER)) <<< "${SOURCE_CODE}" | head -n 1)"
    tail -n +$((LINE_NUMBER + 1)) <<< "${SOURCE_CODE}" | head -n ${CONTEXT_LINES}
    echo

    exit 1
}

check_bin()
{
    if ! command -v "${1}" &> /dev/null; then
        echo_error "Error: \"${1}\" is required but not installed."
        exit 1
    fi
}

get_version()
{
    local -r BIN_NAME="${1}"
    local -r RAW_VERSION="$(
        ${BIN_NAME} -v 2> /dev/null || \
        ${BIN_NAME} version 2> /dev/null || \
        ${BIN_NAME} --version 2> /dev/null || \
        true
    )"

    echo "${RAW_VERSION}" \
        | grep -oE '(0|[1-9][[:digit:]]*)\.(0|[1-9][[:digit:]]*)\.(0|[1-9][[:digit:]]*)' \
        | head -n 1 \
        || true
}

print_version()
{
    local OLD_VERSION=${1:-}
    local NEW_VERSION=${2:-}

    if [ -z "${OLD_VERSION}" ]; then
        OLD_VERSION="none"
    fi

    if [ -z "${NEW_VERSION}" ]; then
        NEW_VERSION="error getting the new version"
    fi

    if [ "${OLD_VERSION}" = "${NEW_VERSION}" ]; then
        echo -e "Already at newest version: \e[0;32m${NEW_VERSION}\e[0m"
    else
        echo -e "Version updated: \e[0;33m${OLD_VERSION} -> ${NEW_VERSION}\e[0m"
    fi
}

get_github_url()
{
    local -r GITHUB_PATH="${1}"

    curl -fsSL "https://api.github.com/repos/${GITHUB_PATH}/releases/latest" | \
        jq -r .assets[].browser_download_url | \
        grep -iE "${OS}.*(${ARCH_1}|${ARCH_2}|${ARCH_3})" | \
        grep -vE '\.asc$|\.sig$|\.deb$|\.rpm$'
}

install_bin()
{
    local -r BIN_NAME="${1}"
    local -r URL="${2}"

    curl -sSL "${URL}" -o "${BIN_DIR}/${BIN_NAME}"
    chmod +x "${BIN_DIR}/${BIN_NAME}"
}

install_archive()
{
    local -r ARCHIVE_TYPE="${1}"
    local -r BIN_NAME="${2}"
    local -r URL="${3}"
    local -r ARCHIVE_BIN_PATH="${4}"

    local -r ARCHIVE_PATH="${TEMP_DIR}/${BIN_NAME}.${ARCHIVE_TYPE}"

    case ${ARCHIVE_TYPE} in
        zip)
            local -r EXTRACT_CMD=(unzip -jqo "${ARCHIVE_PATH}" -d "${BIN_DIR}" "${ARCHIVE_BIN_PATH}")
            ;;
        tar.gz)
            local -r EXTRACT_CMD=(tar xzf "${ARCHIVE_PATH}" -C "${BIN_DIR}" "${ARCHIVE_BIN_PATH}" --transform 's|.*/||')
            ;;
        *)
            print_error "Error: invalid archive type: ${ARCHIVE_TYPE}"
            exit 1
    esac

    curl -sSL "${URL}" -o "${ARCHIVE_PATH}"
    # shellcheck disable=SC2068
    ${EXTRACT_CMD[@]}
    chmod +x "${BIN_DIR}/${BIN_NAME}"
    rm -f "${ARCHIVE_PATH}"
}

install_github_bin()
{
    local -r BIN_NAME="${1}"
    local -r GITHUB_PATH="${2}"

    local -r DOWNLOAD_URL="$(get_github_url "${GITHUB_PATH}")"

    install_bin "${BIN_NAME}" "${DOWNLOAD_URL}"
}

install_github_zip()
{
    local -r BIN_NAME="${1}"
    local -r GITHUB_PATH="${2}"
    local -r ARCHIVE_BIN_PATH="${3}"

    local -r DOWNLOAD_URL="$(get_github_url "${GITHUB_PATH}")"

    install_archive "zip" "${BIN_NAME}" "${DOWNLOAD_URL}" "${ARCHIVE_BIN_PATH}"
}

install_github_targz()
{
    local -r BIN_NAME="${1}"
    local -r GITHUB_PATH="${2}"
    local -r ARCHIVE_BIN_PATH="${3}"

    local -r DOWNLOAD_URL="$(get_github_url "${GITHUB_PATH}")"

    install_archive "tar.gz" "${BIN_NAME}" "${DOWNLOAD_URL}" "${ARCHIVE_BIN_PATH}"
}

install_hashicorp_app()
{
    local -r APP="${1}"

    local -r VERSION="$(curl -fsSL "https://checkpoint-api.hashicorp.com/v1/check/${APP}" | jq -r '.current_version')"
    local -r URL="https://releases.hashicorp.com/${APP}/${VERSION}/${APP}_${VERSION}_${OS}_${ARCH_1}.zip"

    curl -sSL "${URL}" -o "${TEMP_DIR}/${APP}.zip"

    unzip -q -o "${TEMP_DIR}/${APP}.zip" -d "${TEMP_DIR}"
    rm -f "${TEMP_DIR}/${APP}.zip"

    mv -f "${TEMP_DIR}/${APP}" "${BIN_DIR}/${APP}"
    chmod +x "${BIN_DIR}/${APP}"
}

install_app()
{
    local -r BIN_NAME="${1}"
    local -r INSTALL_TYPE="${2}"
    local -r URL="${3}"
    local -r ARCHIVE_BIN_PATH="${4}"

    echo
    echo "Installing ${BIN_NAME}"

    local -r OLD_VERSION="$(get_version "${BIN_NAME}")"

    # shellcheck disable=SC2086
    install_${INSTALL_TYPE} "${BIN_NAME}" "${URL}" "${ARCHIVE_BIN_PATH}"

    local -r NEW_VERSION="$(get_version "${BIN_NAME}")"

    print_version "${OLD_VERSION}" "${NEW_VERSION}"
}

main()
{
    check_bin curl
    check_bin grep
    check_bin jq
    check_bin tar
    check_bin unzip

    if [ ! -d "${BIN_DIR}" ]; then
        mkdir -p "${BIN_DIR}"
    fi

    if [ -d "${TEMP_DIR}" ]; then
        rm -rf "${TEMP_DIR}"
    fi

    mkdir -p "${TEMP_DIR}"

    local -r JFROG_URL="https://releases.jfrog.io/artifactory/jfrog-cli/v2/\[RELEASE\]/jfrog-cli-${OS}-${ARCH_1}/jfrog"

    echo
    echo_info "Installing binaries"

    # Arguments  "binary"     "install type"   "github path or url"        "binary path in archive"
    install_app  "ctop"       "github_bin"     "bcicen/ctop"               ""
    install_app  "driftctl"   "github_bin"     "cloudskiff/driftctl"       ""
    install_app  "jfrog"      "bin"            "${JFROG_URL}"              ""
    install_app  "terraform"  "hashicorp_app"  ""                          ""
    install_app  "terrascan"  "github_targz"   "accurics/terrascan"        "terrascan"
    install_app  "tflint"     "github_zip"     "terraform-linters/tflint"  "tflint"
    install_app  "tfsec"      "github_bin"     "aquasecurity/tfsec"        ""
    install_app  "vagrant"    "hashicorp_app"  ""                          ""

    echo
    echo_info "Update completed"
    echo
}

main
