#!/usr/bin/env bash

# Bash setup
set -o errtrace
trap 'print_error ${?} ${LINENO}' ERR
trap 'print_report' EXIT

# Arguments
readonly SCRIPT=$(basename "${0}")
readonly SCRIPT_DIR="$(cd "$(dirname "${0}")" && pwd)"

# Settings
readonly BIN_DIR="${HOME}/dev/bin"
readonly BASH_COMPLETION_DIR="${HOME}/dev/data/bash/completion"
readonly BASH_COMPLETIONS="eksctl helm kubectl minikube npm skaffold"

# Functions
function echo_info()
{
    echo "$(tput setaf 6)${*}$(tput sgr0)"
}

function echo_error()
{
    echo "$(tput setaf 1)${*}$(tput sgr0)"
}

function print_error()
{
    local -r CODE="$(pr -tn "${SCRIPT_DIR}/${SCRIPT}")"
    local -r STATUS="${1}"
    local -r LINE_NUMBER="${2}"
    local -r CONTEXT_LINES="3"

    echo
    echo_error "$(tput bold)Error: command exited with status ${STATUS} at ${SCRIPT}:${LINE_NUMBER}"

    tail -n +$((LINE_NUMBER - CONTEXT_LINES)) <<< "${CODE}" | head -n ${CONTEXT_LINES}
    echo_error "$(tput bold)$(tail -n +$((LINE_NUMBER)) <<< "${CODE}" | head -n 1)"
    tail -n +$((LINE_NUMBER + 1)) <<< "${CODE}" | head -n ${CONTEXT_LINES}
    echo
}

function check_bash_version()
{
    local -r MINIMUM_VERSION="4"

    if [ "${BASH_VERSINFO[0]}" -lt "${MINIMUM_VERSION}" ]; then
        echo_error "Error: bash must be at least version ${MINIMUM_VERSION}, current version is ${BASH_VERSINFO[0]}"
        exit 1
    fi
}

function check_bin()
{
    if ! command -v "${1}" &> /dev/null; then
        echo_error "Error: \"${1}\" is required but not installed."
        exit 1
    fi
}

function get_latest_github_version()
{
    local -r PROJECT="${1}"
    local -r RELEASES="$(curl -sSL "https://api.github.com/repos/${PROJECT}/releases" | jq -r .[].tag_name)"

    # shellcheck disable=SC2086
    semver -r "" ${RELEASES} | tail -n 1
}

function install_hashicorp_app()
{
    local -r APP="${1}"

    local APP_VERSION
    APP_VERSION="$(curl -s "https://checkpoint-api.hashicorp.com/v1/check/${APP}" | jq -r -M '.current_version')"
    APP_VERSION="${APP_VERSION/v/}"
    local -r APP_URL="https://releases.hashicorp.com/${APP}/${APP_VERSION}/${APP}_${APP_VERSION}_linux_amd64.zip"

    curl -sSL "${APP_URL}" -o "/tmp/${APP}.zip"

    unzip -q -o "/tmp/${APP}.zip" -d "/tmp"
    rm -f "/tmp/${APP}.zip"

    mv -f "/tmp/${APP}" "${BIN_DIR}/${APP}"
    chmod +x "${BIN_DIR}/${APP}"
}

function install_bin()
{
    local -r URL="${1}"
    local -r BIN_NAME="${2}"

    curl -sSL "${URL}" -o "${BIN_DIR}/${BIN_NAME}"
    chmod +x "${BIN_DIR}/${BIN_NAME}"
}

function install_targz()
{
    local -r URL="${1}"
    local -r SRC_BIN_PATH="${2}"
    local -r BIN_NAME="${3}"

    local -r TEMP_DIR="/tmp"

    curl -sSL "${URL}" -o "${TEMP_DIR}/${BIN_NAME}.tar.gz"
    mkdir -p "${TEMP_DIR}/${BIN_NAME}"
    tar xzf "${TEMP_DIR}/${BIN_NAME}.tar.gz" -C "${TEMP_DIR}/${BIN_NAME}"
    mv -f "${TEMP_DIR}/${BIN_NAME}/${SRC_BIN_PATH}" "${BIN_DIR}/${BIN_NAME}"
    chmod +x "${BIN_DIR}/${BIN_NAME}"
    rm -rf "${TEMP_DIR:?}/${BIN_NAME}"
    rm -f "${TEMP_DIR}/${BIN_NAME}.tar.gz"
}

function print_version()
{
    local -r BIN=${1}
    local OLD_VERSION=${2}
    local NEW_VERSION=${3}

    if [ -z "${OLD_VERSION}" ]; then
        OLD_VERSION="None"
    fi

    if [ -z "${NEW_VERSION}" ]; then
        NEW_VERSION="Error getting the new version"
    fi

    if [ "${OLD_VERSION}" = "${NEW_VERSION}" ]; then
        echo "${BIN}: ${NEW_VERSION}"
    else
        echo "$(tput setaf 3)${BIN}: ${OLD_VERSION} -> ${NEW_VERSION}$(tput sgr0)"
    fi
}

function print_report()
{
    {
        print_version "aws-iam-authenticator" "${AWSIAM_VERSION_OLD}"         "${AWSIAM_VERSION_NEW}"
        print_version "ctop"                  "${CTOP_VERSION_OLD}"           "${CTOP_VERSION_NEW}"
        print_version "docker-compose"        "${DOCKER_COMPOSE_VERSION_OLD}" "${DOCKER_COMPOSE_VERSION_NEW}"
        print_version "eksctl"                "${EKSCTL_VERSION_OLD}"         "${EKSCTL_VERSION_NEW}"
        print_version "helm"                  "${HELM_VERSION_OLD}"           "${HELM_VERSION_NEW}"
        print_version "hugo"                  "${HUGO_VERSION_OLD}"           "${HUGO_VERSION_NEW}"
        print_version "istioctl"              "${ISTIOCTL_VERSION_OLD}"       "${ISTIOCTL_VERSION_NEW}"
        print_version "jfrog"                 "${JFROG_VERSION_OLD}"          "${JFROG_VERSION_NEW}"
        print_version "jq"                    "${JQ_VERSION_OLD}"             "${JQ_VERSION_NEW}"
        print_version "kubectl"               "${KUBECTL_VERSION_OLD}"        "${KUBECTL_VERSION_NEW}"
        print_version "minikube"              "${MINIKUBE_VERSION_OLD}"       "${MINIKUBE_VERSION_NEW}"
        print_version "packer"                "${PACKER_VERSION_OLD}"         "${PACKER_VERSION_NEW}"
        print_version "skaffold"              "${SKAFFOLD_VERSION_OLD}"       "${SKAFFOLD_VERSION_NEW}"
        print_version "terraform"             "${TERRAFORM_VERSION_OLD}"      "${TERRAFORM_VERSION_NEW}"
        print_version "vagrant"               "${VAGRANT_VERSION_OLD}"        "${VAGRANT_VERSION_NEW}"
        print_version "yq"                    "${YQ_VERSION_OLD}"             "${YQ_VERSION_NEW}"
    } | column -t -s ' '
    echo
}

function main()
{
    check_bash_version

    check_bin semver
    check_bin curl
    check_bin unzip
    check_bin tar

    if [ ! -d "${BIN_DIR}" ]; then
        mkdir -p "${BIN_DIR}"
    fi

    echo
    echo_info "Installing binaries"

    # Install jq
    echo "Installing jq"
    readonly JQ_VERSION_OLD="$(jq --version 2> /dev/null | cut -d '-' -f 2)"
    local -r JQ_VERSION_LATEST="$(curl -s "https://github.com/stedolan/jq/releases/latest" | sed -E 's|.*releases/tag/(.*)".*|\1|')"
    install_bin "https://github.com/stedolan/jq/releases/download/${JQ_VERSION_LATEST}/jq-linux64" \
        "jq"
    readonly JQ_VERSION_NEW="$(jq --version 2> /dev/null | cut -d '-' -f 2)"

    # Install aws-iam-authenticator
    echo "Installing aws-iam-authenticator"
    readonly AWSIAM_VERSION_OLD="$(aws-iam-authenticator version 2> /dev/null | jq -r .Version)"
    local -r AWSIAM_VERSION_LATEST="$(get_latest_github_version kubernetes-sigs/aws-iam-authenticator)"
    install_bin "https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v${AWSIAM_VERSION_LATEST}/aws-iam-authenticator_${AWSIAM_VERSION_LATEST}_linux_amd64" \
        "aws-iam-authenticator"
    readonly AWSIAM_VERSION_NEW="$(aws-iam-authenticator version 2> /dev/null | jq -r .Version)"

    # Install ctop
    echo "Installing ctop"
    readonly CTOP_VERSION_OLD="$(ctop -v 2> /dev/null | cut -d ' ' -f 3 | sed 's/.$//')"
    local -r CTOP_VERSION_LATEST="$(get_latest_github_version bcicen/ctop)"
    install_bin "https://github.com/bcicen/ctop/releases/download/v${CTOP_VERSION_LATEST}/ctop-${CTOP_VERSION_LATEST}-linux-amd64" \
        "ctop"
    readonly CTOP_VERSION_NEW="$(ctop -v 2> /dev/null | cut -d ' ' -f 3 | sed 's/.$//')"

    # Install docker-compose
    echo "Installing docker-compose"
    readonly DOCKER_COMPOSE_VERSION_OLD="$(docker-compose version 2> /dev/null | head -n 1 | cut -d ' ' -f 3 | sed 's/.$//')"
    local -r DOCKER_COMPOSE_VERSION_LATEST="$(get_latest_github_version docker/compose)"
    install_bin "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION_LATEST}/docker-compose-Linux-x86_64" \
        "docker-compose"
    readonly DOCKER_COMPOSE_VERSION_NEW="$(docker-compose version 2> /dev/null | head -n 1 | cut -d ' ' -f 3 | sed 's/.$//')"

    # Install eksctl
    echo "Installing eksctl"
    readonly EKSCTL_VERSION_OLD="$(eksctl version 2> /dev/null | cut -d '"' -f 6)"
    install_targz "https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_Linux_amd64.tar.gz" \
        "eksctl" "eksctl"
    readonly EKSCTL_VERSION_NEW="$(eksctl version 2> /dev/null | cut -d '"' -f 6)"

    # Install helm
    echo "Installing helm"
    readonly HELM_VERSION_OLD="$(helm version 2> /dev/null | cut -d '"' -f 2 | sed 's/^.//')"
    local -r HELM_VERSION_LATEST="$(get_latest_github_version helm/helm)"
    install_targz "https://get.helm.sh/helm-v${HELM_VERSION_LATEST}-linux-amd64.tar.gz" \
        "linux-amd64/helm" "helm"
    readonly HELM_VERSION_NEW="$(helm version 2> /dev/null | cut -d '"' -f 2 | sed 's/^.//')"

    # Install hugo
    echo "Installing hugo"
    readonly HUGO_VERSION_OLD="$(hugo version 2> /dev/null | cut -d ' ' -f 5 | cut -d '-' -f 1 | sed 's/^.//')"
    local -r HUGO_VERSION_LATEST="$(get_latest_github_version gohugoio/hugo)"
    install_targz "https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION_LATEST}/hugo_${HUGO_VERSION_LATEST}_Linux-64bit.tar.gz" \
        "hugo" "hugo"
    readonly HUGO_VERSION_NEW="$(hugo version 2> /dev/null | cut -d ' ' -f 5 | cut -d '-' -f 1 | sed 's/^.//')"

    # Install istioctl
    echo "Installing istioctl"
    readonly ISTIOCTL_VERSION_OLD="$(istioctl version --short=true --remote=false 2> /dev/null || true)"
    local -r ISTIOCTL_VERSION_LATEST="$(get_latest_github_version istio/istio)"
    install_targz "https://github.com/istio/istio/releases/download/${ISTIOCTL_VERSION_LATEST}/istioctl-${ISTIOCTL_VERSION_LATEST}-linux.tar.gz" \
        "istioctl" "istioctl"
    readonly ISTIOCTL_VERSION_NEW="$(istioctl version --short=true --remote=false 2> /dev/null || true)"

    # Install jfrog
    echo "Installing jfrog"
    readonly JFROG_VERSION_OLD="$(jfrog -v 2> /dev/null | cut -d ' ' -f 3)"
    install_bin "https://api.bintray.com/content/jfrog/jfrog-cli-go/\$latest/jfrog-cli-linux-amd64/jfrog?bt_package=jfrog-cli-linux-amd64" \
        "jfrog"
    readonly JFROG_VERSION_NEW="$(jfrog -v 2> /dev/null | cut -d ' ' -f 3)"

    # Install kubectl
    echo "Installing kubectl"
    readonly KUBECTL_VERSION_OLD="$(kubectl version --client --short 2> /dev/null | cut -d ' ' -f 3 | sed 's/^.//')"
    local -r KUBECTL_VERSION_LATEST="$(curl -sSL https://storage.googleapis.com/kubernetes-release/release/stable.txt)"
    install_bin "https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION_LATEST}/bin/linux/amd64/kubectl" \
        "kubectl"
    readonly KUBECTL_VERSION_NEW="$(kubectl version --client --short 2> /dev/null | cut -d ' ' -f 3 | sed 's/^.//')"

    # Install minikube
    echo "Installing minikube"
    readonly MINIKUBE_VERSION_OLD=$(minikube version 2> /dev/null | head -n 1 | cut -d ' ' -f 3 | sed 's/^.//')
    install_bin "https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64" \
        "minikube"
    readonly MINIKUBE_VERSION_NEW=$(minikube version 2> /dev/null | head -n 1 | cut -d ' ' -f 3 | sed 's/^.//')

    # Install packer
    echo "Installing packer"
    readonly PACKER_VERSION_OLD="$(packer version 2> /dev/null | head -n 1 | cut -d ' ' -f 2 | sed 's/^.//')"
    install_hashicorp_app "packer"
    readonly PACKER_VERSION_NEW="$(packer version 2> /dev/null | head -n 1 | cut -d ' ' -f 2 | sed 's/^.//')"

    # Install skaffold
    echo "Installing skaffold"
    readonly SKAFFOLD_VERSION_OLD="$(skaffold version 2> /dev/null | sed 's/^.//')"
    install_bin "https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64" \
        "skaffold"
    readonly SKAFFOLD_VERSION_NEW="$(skaffold version 2> /dev/null | sed 's/^.//')"

    # Install terraform
    echo "Installing terraform"
    readonly TERRAFORM_VERSION_OLD="$(terraform -v 2> /dev/null | head -n 1 | cut -d ' ' -f 2 | sed 's/^.//')"
    install_hashicorp_app "terraform"
    readonly TERRAFORM_VERSION_NEW="$(terraform -v 2> /dev/null | head -n 1 | cut -d ' ' -f 2 | sed 's/^.//')"

    # Install vagrant
    echo "Installing vagrant"
    readonly VAGRANT_VERSION_OLD="$(vagrant -v 2> /dev/null | cut -d ' ' -f 2)"
    install_hashicorp_app "vagrant"
    readonly VAGRANT_VERSION_NEW="$(vagrant -v 2> /dev/null | cut -d ' ' -f 2)"

    # Install yq
    echo "Installing yq"
    readonly YQ_VERSION_OLD="$(yq --version 2> /dev/null | cut -d ' ' -f 3)"
    local -r YQ_VERSION_LATEST="$(get_latest_github_version mikefarah/yq)"
    install_bin "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION_LATEST}/yq_linux_amd64" \
        "yq"
    readonly YQ_VERSION_NEW="$(yq --version 2> /dev/null | cut -d ' ' -f 3)"

    # Generate bash completions
    echo
    echo_info "Generating bash completions"

    if [ ! -d "${BASH_COMPLETION_DIR}" ]; then
        mkdir -p "${BASH_COMPLETION_DIR}"
    fi

    rm -f "${BASH_COMPLETION_DIR}"/*

    for COMPLETION in ${BASH_COMPLETIONS}; do
        if [ -e "$(command -v "${COMPLETION}")" ]; then
            echo "Generating ${COMPLETION} completion"
            ${COMPLETION} completion bash > "${BASH_COMPLETION_DIR}/${COMPLETION}"
        else
            echo "${COMPLETION} completion not found"
        fi
    done

    echo "Generating jfrog completion"
    export JFROG_CLI_HOME_DIR="${BASH_COMPLETION_DIR}"
    jfrog completion bash > /dev/null

    echo "Generating pip3 completion"
    pip3 completion --bash > "${BASH_COMPLETION_DIR}/pip3"

    echo "Generating istioctl completion"
    istioctl collateral --bash --outputDir "${BASH_COMPLETION_DIR}"

    echo "Generating docker-compose completion"
    curl -sSL "https://raw.githubusercontent.com/docker/compose/${DOCKER_COMPOSE_VERSION_LATEST}/contrib/completion/bash/docker-compose" \
        -o "${BASH_COMPLETION_DIR}/docker-compose"

    # Report
    echo
    echo_info "Update completed"
}

main
