#!/usr/bin/env bash

# Bash setup
set -o errtrace
trap 'print_error ${?} ${LINENO}' ERR
trap 'print_report' EXIT

# Arguments
readonly SCRIPT=$(basename "${0}")
readonly SCRIPT_DIR="$(cd "$(dirname "${0}")" && pwd)"

# Settings
readonly BIN_DIR="${HOME}/dev/bin"
readonly TEMP_DIR="/tmp"

# Functions
function echo_info()
{
    echo "$(tput setaf 6)${*}$(tput sgr0)"
}

function echo_error()
{
    echo "$(tput setaf 1)${*}$(tput sgr0)"
}

function print_error()
{
    local -r CODE="$(pr -tn "${SCRIPT_DIR}/${SCRIPT}")"
    local -r STATUS="${1}"
    local -r LINE_NUMBER="${2}"
    local -r CONTEXT_LINES="3"

    echo
    echo_error "$(tput bold)Error: command exited with status ${STATUS} at ${SCRIPT}:${LINE_NUMBER}"

    tail -n +$((LINE_NUMBER - CONTEXT_LINES)) <<< "${CODE}" | head -n ${CONTEXT_LINES}
    echo_error "$(tput bold)$(tail -n +$((LINE_NUMBER)) <<< "${CODE}" | head -n 1)"
    tail -n +$((LINE_NUMBER + 1)) <<< "${CODE}" | head -n ${CONTEXT_LINES}
    echo
}

function check_bash_version()
{
    local -r MINIMUM_VERSION="4"

    if [ "${BASH_VERSINFO[0]}" -lt "${MINIMUM_VERSION}" ]; then
        echo_error "Error: bash must be at least version ${MINIMUM_VERSION}, current version is ${BASH_VERSINFO[0]}"
        exit 1
    fi
}

function check_bin()
{
    if ! command -v "${1}" &> /dev/null; then
        echo_error "Error: \"${1}\" is required but not installed."
        exit 1
    fi
}

function get_latest_github_version()
{
    local -r PROJECT="${1}"
    local -r RELEASES="$(curl -sSL "https://api.github.com/repos/${PROJECT}/releases" | jq -r .[].tag_name)"

    # shellcheck disable=SC2086
    semver -r "" ${RELEASES} | tail -n 1
}

function install_hashicorp_app()
{
    local -r APP="${1}"

    local APP_VERSION
    APP_VERSION="$(curl -s "https://checkpoint-api.hashicorp.com/v1/check/${APP}" | jq -r -M '.current_version')"
    APP_VERSION="${APP_VERSION/v/}"
    local -r APP_URL="https://releases.hashicorp.com/${APP}/${APP_VERSION}/${APP}_${APP_VERSION}_linux_amd64.zip"

    curl -sSL "${APP_URL}" -o "${TEMP_DIR}/${APP}.zip"

    unzip -q -o "${TEMP_DIR}/${APP}.zip" -d "${TEMP_DIR}"
    rm -f "${TEMP_DIR}/${APP}.zip"

    mv -f "${TEMP_DIR}/${APP}" "${BIN_DIR}/${APP}"
    chmod +x "${BIN_DIR}/${APP}"
}

function install_bin()
{
    local -r URL="${1}"
    local -r BIN_NAME="${2}"

    curl -sSL "${URL}" -o "${BIN_DIR}/${BIN_NAME}"
    chmod +x "${BIN_DIR}/${BIN_NAME}"
}

function install_targz()
{
    local -r URL="${1}"
    local -r SRC_BIN_PATH="${2}"
    local -r BIN_NAME="${3}"

    curl -sSL "${URL}" -o "${TEMP_DIR}/${BIN_NAME}.tar.gz"
    mkdir -p "${TEMP_DIR}/${BIN_NAME}"
    tar xzf "${TEMP_DIR}/${BIN_NAME}.tar.gz" -C "${TEMP_DIR}/${BIN_NAME}"
    mv -f "${TEMP_DIR}/${BIN_NAME}/${SRC_BIN_PATH}" "${BIN_DIR}/${BIN_NAME}"
    chmod +x "${BIN_DIR}/${BIN_NAME}"
    rm -rf "${TEMP_DIR:?}/${BIN_NAME}"
    rm -f "${TEMP_DIR}/${BIN_NAME}.tar.gz"
}

function print_version()
{
    local -r BIN=${1}
    local OLD_VERSION=${2}
    local NEW_VERSION=${3}

    if [ -z "${OLD_VERSION}" ]; then
        OLD_VERSION="None"
    fi

    if [ -z "${NEW_VERSION}" ]; then
        NEW_VERSION="Error getting the new version"
    fi

    if [ "${OLD_VERSION}" = "${NEW_VERSION}" ]; then
        echo "${BIN}: ${NEW_VERSION}"
    else
        echo "$(tput setaf 3)${BIN}: ${OLD_VERSION} -> ${NEW_VERSION}$(tput sgr0)"
    fi
}

function print_report()
{
    {
        print_version "ctop"      "${CTOP_VERSION_OLD}"      "${CTOP_VERSION_NEW}"
        print_version "eksctl"    "${EKSCTL_VERSION_OLD}"    "${EKSCTL_VERSION_NEW}"
        print_version "jfrog"     "${JFROG_VERSION_OLD}"     "${JFROG_VERSION_NEW}"
        print_version "k6"        "${K6_VERSION_OLD}"        "${K6_VERSION_NEW}"
        print_version "terraform" "${TERRAFORM_VERSION_OLD}" "${TERRAFORM_VERSION_NEW}"
        print_version "vagrant"   "${VAGRANT_VERSION_OLD}"   "${VAGRANT_VERSION_NEW}"
    } | column -t -s ' '
    echo
}

function main()
{
    check_bash_version

    check_bin semver
    check_bin curl
    check_bin unzip
    check_bin tar
    check_bin gzip
    check_bin jq

    if [ ! -d "${BIN_DIR}" ]; then
        mkdir -p "${BIN_DIR}"
    fi

    echo
    echo_info "Installing binaries"

    # Install ctop
    echo "Installing ctop"
    readonly CTOP_VERSION_OLD="$(ctop -v 2> /dev/null | cut -d ' ' -f 3 | sed 's/.$//')"
    local -r CTOP_VERSION_LATEST="$(get_latest_github_version bcicen/ctop)"
    install_bin "https://github.com/bcicen/ctop/releases/download/v${CTOP_VERSION_LATEST}/ctop-${CTOP_VERSION_LATEST}-linux-amd64" \
        "ctop"
    readonly CTOP_VERSION_NEW="$(ctop -v 2> /dev/null | cut -d ' ' -f 3 | sed 's/.$//')"

    # Install eksctl
    echo "Installing eksctl"
    readonly EKSCTL_VERSION_OLD="$(eksctl version 2> /dev/null | cut -d '"' -f 6)"
    install_targz "https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_Linux_amd64.tar.gz" \
        "eksctl" "eksctl"
    readonly EKSCTL_VERSION_NEW="$(eksctl version 2> /dev/null | cut -d '"' -f 6)"

    # Install jfrog
    echo "Installing jfrog"
    readonly JFROG_VERSION_OLD="$(jfrog -v 2> /dev/null | cut -d ' ' -f 3)"
    install_bin "https://api.bintray.com/content/jfrog/jfrog-cli-go/\$latest/jfrog-cli-linux-amd64/jfrog?bt_package=jfrog-cli-linux-amd64" \
        "jfrog"
    readonly JFROG_VERSION_NEW="$(jfrog -v 2> /dev/null | cut -d ' ' -f 3)"

    # Install k6
    echo "Installing k6"
    readonly K6_VERSION_OLD="$(k6 version 2> /dev/null | cut -d ' ' -f 2 | sed 's/v//')"
    local -r K6_VERSION_LATEST="$(get_latest_github_version loadimpact/k6)"
    install_targz "https://github.com/loadimpact/k6/releases/download/v${K6_VERSION_LATEST}/k6-v${K6_VERSION_LATEST}-linux64.tar.gz" \
        "k6-v${K6_VERSION_LATEST}-linux64/k6" "k6"
    readonly K6_VERSION_NEW="$(k6 version 2> /dev/null | cut -d ' ' -f 2 | sed 's/v//')"

    # Install terraform
    echo "Installing terraform"
    readonly TERRAFORM_VERSION_OLD="$(terraform -v 2> /dev/null | head -n 1 | cut -d ' ' -f 2 | sed 's/^.//')"
    install_hashicorp_app "terraform"
    readonly TERRAFORM_VERSION_NEW="$(terraform -v 2> /dev/null | head -n 1 | cut -d ' ' -f 2 | sed 's/^.//')"

    # Install vagrant
    echo "Installing vagrant"
    readonly VAGRANT_VERSION_OLD="$(vagrant -v 2> /dev/null | cut -d ' ' -f 2)"
    install_hashicorp_app "vagrant"
    readonly VAGRANT_VERSION_NEW="$(vagrant -v 2> /dev/null | cut -d ' ' -f 2)"

    # Report
    echo
    echo_info "Update completed"
}

main
