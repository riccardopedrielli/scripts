#!/usr/bin/env bash

# shellcheck disable=SC2155

set -Eeuo pipefail
trap 'print_error ${BASH_SOURCE[0]} ${LINENO} ${?}' ERR

# Arguments
readonly SCRIPT_DIR="$(cd "$(dirname "${0}")" && pwd)"

echo_info()
{
    echo "$(tput setaf 6)${*}$(tput sgr0)"
}

echo_error()
{
    echo "$(tput setaf 1)${*}$(tput sgr0)"
}

print_error()
{
    local -r SOURCE_PATH="${1}"
    local -r LINE_NUMBER="${2}"
    local -r EXIT_STATUS="${3}"
    local -r CONTEXT_LINES="3"
    local -r SOURCE_CODE="$(pr -tn "${SOURCE_PATH}")"

    local RELATIVE_PATH="${SOURCE_PATH#"${SCRIPT_DIR}"}"
    local -r RELATIVE_PATH="${RELATIVE_PATH#/}"

    echo
    echo_error "$(tput bold)Error: command exited with status ${EXIT_STATUS} at ${RELATIVE_PATH}:${LINE_NUMBER}"

    tail -n +$((LINE_NUMBER - CONTEXT_LINES)) <<< "${SOURCE_CODE}" | head -n ${CONTEXT_LINES}
    echo_error "$(tput bold)$(tail -n +$((LINE_NUMBER)) <<< "${SOURCE_CODE}" | head -n 1)"
    tail -n +$((LINE_NUMBER + 1)) <<< "${SOURCE_CODE}" | head -n ${CONTEXT_LINES}
    echo

    exit 1
}

check_bin()
{
    if ! command -v "${1}" &> /dev/null; then
        echo_error "Error: \"${1}\" is required but not installed."
        exit 1
    fi
}

main()
{
    check_bin npm

    local PACKAGES
    PACKAGES="$(npm outdated --global --parseable --depth 0)"

    if [ -n "${PACKAGES}" ]; then

        PACKAGES="$(echo "${PACKAGES}" | cut -d ":" -f 1)"

        for PACKAGE in ${PACKAGES}; do
            PACKAGE=${PACKAGE#*node_modules/}
            echo_info "Updating ${PACKAGE}"
            npm install --global "${PACKAGE}"
        done

        echo_info "Done"
    else
        echo_info "All packages are already at the latest version"
    fi
}

main
